/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module full_adder_cycler_fsm_2 (
    input clk,
    input rst,
    output reg x,
    output reg y,
    output reg cin,
    output reg s,
    output reg cout
  );
  
  
  
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  
  
  localparam OFF_fsm_checker = 3'd0;
  localparam X_fsm_checker = 3'd1;
  localparam Y_fsm_checker = 3'd2;
  localparam C_fsm_checker = 3'd3;
  localparam XY_fsm_checker = 3'd4;
  localparam YC_fsm_checker = 3'd5;
  localparam XC_fsm_checker = 3'd6;
  localparam XYC_fsm_checker = 3'd7;
  
  reg [2:0] M_fsm_checker_d, M_fsm_checker_q = OFF_fsm_checker;
  
  always @* begin
    M_fsm_checker_d = M_fsm_checker_q;
    M_counter_d = M_counter_q;
    
    x = 1'h0;
    y = 1'h0;
    cin = 1'h0;
    s = 1'h0;
    cout = 1'h0;
    M_counter_d = M_counter_q + 1'h1;
    
    case (M_fsm_checker_q)
      OFF_fsm_checker: begin
        x = 1'h0;
        y = 1'h0;
        cin = 1'h0;
        s = 1'h0;
        cout = 1'h0;
        if (M_counter_q[27+0-:1] == 1'h1) begin
          M_fsm_checker_d = X_fsm_checker;
          M_counter_d = 1'h0;
        end
      end
      X_fsm_checker: begin
        x = 1'h1;
        y = 1'h0;
        cin = 1'h0;
        s = 1'h1;
        cout = 1'h0;
        if (M_counter_q[27+0-:1] == 1'h1) begin
          M_fsm_checker_d = Y_fsm_checker;
          M_counter_d = 1'h0;
        end
      end
      Y_fsm_checker: begin
        x = 1'h0;
        y = 1'h1;
        cin = 1'h0;
        s = 1'h1;
        cout = 1'h0;
        if (M_counter_q[27+0-:1] == 1'h1) begin
          M_fsm_checker_d = C_fsm_checker;
          M_counter_d = 1'h0;
        end
      end
      C_fsm_checker: begin
        x = 1'h0;
        y = 1'h0;
        cin = 1'h1;
        s = 1'h1;
        cout = 1'h0;
        if (M_counter_q[27+0-:1] == 1'h1) begin
          M_fsm_checker_d = XY_fsm_checker;
          M_counter_d = 1'h0;
        end
      end
      XY_fsm_checker: begin
        x = 1'h1;
        y = 1'h1;
        cin = 1'h0;
        s = 1'h0;
        cout = 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1) begin
          M_fsm_checker_d = YC_fsm_checker;
          M_counter_d = 1'h0;
        end
      end
      YC_fsm_checker: begin
        x = 1'h0;
        y = 1'h1;
        cin = 1'h1;
        s = 1'h0;
        cout = 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1) begin
          M_fsm_checker_d = XC_fsm_checker;
          M_counter_d = 1'h0;
        end
      end
      XC_fsm_checker: begin
        x = 1'h1;
        y = 1'h0;
        cin = 1'h1;
        s = 1'h0;
        cout = 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1) begin
          M_fsm_checker_d = XYC_fsm_checker;
          M_counter_d = 1'h0;
        end
      end
      XYC_fsm_checker: begin
        x = 1'h1;
        y = 1'h1;
        cin = 1'h1;
        s = 1'h1;
        cout = 1'h1;
        if (M_counter_q[27+0-:1] == 1'h1) begin
          M_fsm_checker_d = OFF_fsm_checker;
          M_counter_d = 1'h0;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_fsm_checker_q <= 1'h0;
    end else begin
      M_fsm_checker_q <= M_fsm_checker_d;
    end
  end
  
endmodule
