/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg [2:0] outValue,
    input checkSum,
    input checkCarry
  );
  
  
  
  reg rst;
  
  reg manualOverride;
  reg testX;
  reg testY;
  reg testCin;
  reg expectedS;
  reg expectedCout;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  wire [1-1:0] M_cycler_x;
  wire [1-1:0] M_cycler_y;
  wire [1-1:0] M_cycler_cin;
  wire [1-1:0] M_cycler_s;
  wire [1-1:0] M_cycler_cout;
  full_adder_cycler_fsm_2 cycler (
    .clk(clk),
    .rst(rst),
    .x(M_cycler_x),
    .y(M_cycler_y),
    .cin(M_cycler_cin),
    .s(M_cycler_s),
    .cout(M_cycler_cout)
  );
  
  wire [1-1:0] M_fa_s;
  wire [1-1:0] M_fa_cout;
  reg [1-1:0] M_fa_x;
  reg [1-1:0] M_fa_y;
  reg [1-1:0] M_fa_cin;
  full_adder_3 fa (
    .x(M_fa_x),
    .y(M_fa_y),
    .cin(M_fa_cin),
    .s(M_fa_s),
    .cout(M_fa_cout)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    manualOverride = io_dip[16+0+0-:1];
    testX = manualOverride ? io_dip[16+7+0-:1] : M_cycler_x;
    testY = manualOverride ? io_dip[16+6+0-:1] : M_cycler_y;
    testCin = manualOverride ? io_dip[16+5+0-:1] : M_cycler_cin;
    io_led[16+7+0-:1] = testX;
    io_led[16+6+0-:1] = testY;
    io_led[16+5+0-:1] = testCin;
    outValue[0+0-:1] = testX;
    outValue[1+0-:1] = testY;
    outValue[2+0-:1] = testCin;
    M_fa_x = testX;
    M_fa_y = testY;
    M_fa_cin = testCin;
    expectedS = M_fa_s;
    expectedCout = M_fa_cout;
    io_led[8+7+0-:1] = expectedS;
    io_led[8+6+0-:1] = expectedCout;
    io_led[8+1+0-:1] = checkSum;
    io_led[8+0+0-:1] = checkCarry;
    io_led[0+7-:8] = {4'h8{expectedS == checkSum & expectedCout == checkCarry}};
  end
endmodule
